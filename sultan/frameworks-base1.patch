From c783d6643ecc607e917e27091bb4d6b126c470d4 Mon Sep 17 00:00:00 2001
From: Sultanxda <sultanxda@gmail.com>
Date: Wed, 9 Sep 2015 19:34:21 -0700
Subject: [PATCH] StrictMode: Disable all strict mode functions when disable
 prop is set

Strict mode can still be used to produce red border flashes even when the
disable property is set, among other things.

Truly disable all strict-mode checks outright when the disable property
is set.

Signed-off-by: Sultanxda <sultanxda@gmail.com>
---
 core/java/android/os/StrictMode.java | 22 +++++++++++++++++++++-
 1 file changed, 21 insertions(+), 1 deletion(-)

diff --git a/core/java/android/os/StrictMode.java b/core/java/android/os/StrictMode.java
index f10b982..57bea43 100644
--- a/core/java/android/os/StrictMode.java
+++ b/core/java/android/os/StrictMode.java
@@ -1057,7 +1057,7 @@ public static boolean conditionallyEnableDebugLogging() {
 
         // For debug builds, log event loop stalls to dropbox for analysis.
         // Similar logic also appears in ActivityThread.java for system apps.
-        if (!doFlashes && (IS_USER_BUILD || suppress)) {
+        if ((!doFlashes && IS_USER_BUILD) || suppress) {
             setCloseGuardEnabled(false);
             return false;
         }
@@ -1301,6 +1301,11 @@ void startHandlingViolationException(BlockGuard.BlockGuardPolicyException e) {
         // until the time the looper is idle again (right before
         // the next epoll_wait)
         void handleViolationWithTimingAttempt(final ViolationInfo info) {
+            final boolean suppress = SystemProperties.getBoolean(DISABLE_PROPERTY, false);
+            if (suppress) {
+                return;
+            }
+
             Looper looper = Looper.myLooper();
 
             // Without a Looper, we're unable to time how long the
@@ -1617,6 +1622,11 @@ public boolean queueIdle() {
      * @param policy the policy to put into place
      */
     public static void setVmPolicy(final VmPolicy policy) {
+        final boolean suppress = SystemProperties.getBoolean(DISABLE_PROPERTY, false);
+        if (suppress) {
+            return;
+        }
+
         synchronized (StrictMode.class) {
             sVmPolicy = policy;
             sVmPolicyMask = policy.mask;
@@ -1804,6 +1814,11 @@ public static void onVmPolicyViolation(String message, Throwable originStack) {
      */
     public static void onVmPolicyViolation(String message, Throwable originStack,
             boolean forceDeath) {
+        final boolean suppress = SystemProperties.getBoolean(DISABLE_PROPERTY, false);
+        if (suppress) {
+            return;
+        }
+
         final boolean penaltyDropbox = (sVmPolicyMask & PENALTY_DROPBOX) != 0;
         final boolean penaltyDeath = ((sVmPolicyMask & PENALTY_DEATH) != 0) || forceDeath;
         final boolean penaltyLog = (sVmPolicyMask & PENALTY_LOG) != 0;
@@ -1905,6 +1920,11 @@ public static void onVmPolicyViolation(String message, Throwable originStack,
      * we here read back all the encoded violations.
      */
     /* package */ static void readAndHandleBinderCallViolations(Parcel p) {
+        final boolean suppress = SystemProperties.getBoolean(DISABLE_PROPERTY, false);
+        if (suppress) {
+            return;
+        }
+
         // Our own stack trace to append
         StringWriter sw = new StringWriter();
         sw.append("# via Binder call with stack:\n");
